// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner.proto

#ifndef PROTOBUF_inner_2eproto__INCLUDED
#define PROTOBUF_inner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace pb {
class TestMsg;
class TestMsgDefaultTypeInternal;
extern TestMsgDefaultTypeInternal _TestMsg_default_instance_;
class iTestForwardMsg;
class iTestForwardMsgDefaultTypeInternal;
extern iTestForwardMsgDefaultTypeInternal _iTestForwardMsg_default_instance_;
class iTestPingActivityMsg;
class iTestPingActivityMsgDefaultTypeInternal;
extern iTestPingActivityMsgDefaultTypeInternal _iTestPingActivityMsg_default_instance_;
class iTestPingActivityREQ;
class iTestPingActivityREQDefaultTypeInternal;
extern iTestPingActivityREQDefaultTypeInternal _iTestPingActivityREQ_default_instance_;
class iTestPingActivityRSP;
class iTestPingActivityRSPDefaultTypeInternal;
extern iTestPingActivityRSPDefaultTypeInternal _iTestPingActivityRSP_default_instance_;
class iTestPingShopREQ;
class iTestPingShopREQDefaultTypeInternal;
extern iTestPingShopREQDefaultTypeInternal _iTestPingShopREQ_default_instance_;
}  // namespace pb

namespace pb {

namespace protobuf_inner_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_inner_2eproto

// ===================================================================

class TestMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TestMsg) */ {
 public:
  TestMsg();
  virtual ~TestMsg();

  TestMsg(const TestMsg& from);

  inline TestMsg& operator=(const TestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestMsg(TestMsg&& from) noexcept
    : TestMsg() {
    *this = ::std::move(from);
  }

  inline TestMsg& operator=(TestMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg& default_instance();

  static inline const TestMsg* internal_default_instance() {
    return reinterpret_cast<const TestMsg*>(
               &_TestMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TestMsg* other);
  friend void swap(TestMsg& a, TestMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  TestMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestMsg& from);
  void MergeFrom(const TestMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TestMsg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_inner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class iTestPingShopREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.iTestPingShopREQ) */ {
 public:
  iTestPingShopREQ();
  virtual ~iTestPingShopREQ();

  iTestPingShopREQ(const iTestPingShopREQ& from);

  inline iTestPingShopREQ& operator=(const iTestPingShopREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  iTestPingShopREQ(iTestPingShopREQ&& from) noexcept
    : iTestPingShopREQ() {
    *this = ::std::move(from);
  }

  inline iTestPingShopREQ& operator=(iTestPingShopREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const iTestPingShopREQ& default_instance();

  static inline const iTestPingShopREQ* internal_default_instance() {
    return reinterpret_cast<const iTestPingShopREQ*>(
               &_iTestPingShopREQ_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(iTestPingShopREQ* other);
  friend void swap(iTestPingShopREQ& a, iTestPingShopREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline iTestPingShopREQ* New() const PROTOBUF_FINAL { return New(NULL); }

  iTestPingShopREQ* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const iTestPingShopREQ& from);
  void MergeFrom(const iTestPingShopREQ& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(iTestPingShopREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ping_msg = 1;
  bool has_ping_msg() const;
  void clear_ping_msg();
  static const int kPingMsgFieldNumber = 1;
  const ::std::string& ping_msg() const;
  void set_ping_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_ping_msg(::std::string&& value);
  #endif
  void set_ping_msg(const char* value);
  void set_ping_msg(const char* value, size_t size);
  ::std::string* mutable_ping_msg();
  ::std::string* release_ping_msg();
  void set_allocated_ping_msg(::std::string* ping_msg);

  // @@protoc_insertion_point(class_scope:pb.iTestPingShopREQ)
 private:
  void set_has_ping_msg();
  void clear_has_ping_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ping_msg_;
  friend struct protobuf_inner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class iTestPingActivityMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.iTestPingActivityMsg) */ {
 public:
  iTestPingActivityMsg();
  virtual ~iTestPingActivityMsg();

  iTestPingActivityMsg(const iTestPingActivityMsg& from);

  inline iTestPingActivityMsg& operator=(const iTestPingActivityMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  iTestPingActivityMsg(iTestPingActivityMsg&& from) noexcept
    : iTestPingActivityMsg() {
    *this = ::std::move(from);
  }

  inline iTestPingActivityMsg& operator=(iTestPingActivityMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const iTestPingActivityMsg& default_instance();

  static inline const iTestPingActivityMsg* internal_default_instance() {
    return reinterpret_cast<const iTestPingActivityMsg*>(
               &_iTestPingActivityMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(iTestPingActivityMsg* other);
  friend void swap(iTestPingActivityMsg& a, iTestPingActivityMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline iTestPingActivityMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  iTestPingActivityMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const iTestPingActivityMsg& from);
  void MergeFrom(const iTestPingActivityMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(iTestPingActivityMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ping_msg = 1;
  bool has_ping_msg() const;
  void clear_ping_msg();
  static const int kPingMsgFieldNumber = 1;
  const ::std::string& ping_msg() const;
  void set_ping_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_ping_msg(::std::string&& value);
  #endif
  void set_ping_msg(const char* value);
  void set_ping_msg(const char* value, size_t size);
  ::std::string* mutable_ping_msg();
  ::std::string* release_ping_msg();
  void set_allocated_ping_msg(::std::string* ping_msg);

  // @@protoc_insertion_point(class_scope:pb.iTestPingActivityMsg)
 private:
  void set_has_ping_msg();
  void clear_has_ping_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ping_msg_;
  friend struct protobuf_inner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class iTestPingActivityREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.iTestPingActivityREQ) */ {
 public:
  iTestPingActivityREQ();
  virtual ~iTestPingActivityREQ();

  iTestPingActivityREQ(const iTestPingActivityREQ& from);

  inline iTestPingActivityREQ& operator=(const iTestPingActivityREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  iTestPingActivityREQ(iTestPingActivityREQ&& from) noexcept
    : iTestPingActivityREQ() {
    *this = ::std::move(from);
  }

  inline iTestPingActivityREQ& operator=(iTestPingActivityREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const iTestPingActivityREQ& default_instance();

  static inline const iTestPingActivityREQ* internal_default_instance() {
    return reinterpret_cast<const iTestPingActivityREQ*>(
               &_iTestPingActivityREQ_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(iTestPingActivityREQ* other);
  friend void swap(iTestPingActivityREQ& a, iTestPingActivityREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline iTestPingActivityREQ* New() const PROTOBUF_FINAL { return New(NULL); }

  iTestPingActivityREQ* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const iTestPingActivityREQ& from);
  void MergeFrom(const iTestPingActivityREQ& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(iTestPingActivityREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ping_msg = 1;
  bool has_ping_msg() const;
  void clear_ping_msg();
  static const int kPingMsgFieldNumber = 1;
  const ::std::string& ping_msg() const;
  void set_ping_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_ping_msg(::std::string&& value);
  #endif
  void set_ping_msg(const char* value);
  void set_ping_msg(const char* value, size_t size);
  ::std::string* mutable_ping_msg();
  ::std::string* release_ping_msg();
  void set_allocated_ping_msg(::std::string* ping_msg);

  // @@protoc_insertion_point(class_scope:pb.iTestPingActivityREQ)
 private:
  void set_has_ping_msg();
  void clear_has_ping_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ping_msg_;
  friend struct protobuf_inner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class iTestPingActivityRSP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.iTestPingActivityRSP) */ {
 public:
  iTestPingActivityRSP();
  virtual ~iTestPingActivityRSP();

  iTestPingActivityRSP(const iTestPingActivityRSP& from);

  inline iTestPingActivityRSP& operator=(const iTestPingActivityRSP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  iTestPingActivityRSP(iTestPingActivityRSP&& from) noexcept
    : iTestPingActivityRSP() {
    *this = ::std::move(from);
  }

  inline iTestPingActivityRSP& operator=(iTestPingActivityRSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const iTestPingActivityRSP& default_instance();

  static inline const iTestPingActivityRSP* internal_default_instance() {
    return reinterpret_cast<const iTestPingActivityRSP*>(
               &_iTestPingActivityRSP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(iTestPingActivityRSP* other);
  friend void swap(iTestPingActivityRSP& a, iTestPingActivityRSP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline iTestPingActivityRSP* New() const PROTOBUF_FINAL { return New(NULL); }

  iTestPingActivityRSP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const iTestPingActivityRSP& from);
  void MergeFrom(const iTestPingActivityRSP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(iTestPingActivityRSP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pong_msg = 1;
  bool has_pong_msg() const;
  void clear_pong_msg();
  static const int kPongMsgFieldNumber = 1;
  const ::std::string& pong_msg() const;
  void set_pong_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_pong_msg(::std::string&& value);
  #endif
  void set_pong_msg(const char* value);
  void set_pong_msg(const char* value, size_t size);
  ::std::string* mutable_pong_msg();
  ::std::string* release_pong_msg();
  void set_allocated_pong_msg(::std::string* pong_msg);

  // @@protoc_insertion_point(class_scope:pb.iTestPingActivityRSP)
 private:
  void set_has_pong_msg();
  void clear_has_pong_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pong_msg_;
  friend struct protobuf_inner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class iTestForwardMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.iTestForwardMsg) */ {
 public:
  iTestForwardMsg();
  virtual ~iTestForwardMsg();

  iTestForwardMsg(const iTestForwardMsg& from);

  inline iTestForwardMsg& operator=(const iTestForwardMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  iTestForwardMsg(iTestForwardMsg&& from) noexcept
    : iTestForwardMsg() {
    *this = ::std::move(from);
  }

  inline iTestForwardMsg& operator=(iTestForwardMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const iTestForwardMsg& default_instance();

  static inline const iTestForwardMsg* internal_default_instance() {
    return reinterpret_cast<const iTestForwardMsg*>(
               &_iTestForwardMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(iTestForwardMsg* other);
  friend void swap(iTestForwardMsg& a, iTestForwardMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline iTestForwardMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  iTestForwardMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const iTestForwardMsg& from);
  void MergeFrom(const iTestForwardMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(iTestForwardMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string remote_node_name = 1;
  bool has_remote_node_name() const;
  void clear_remote_node_name();
  static const int kRemoteNodeNameFieldNumber = 1;
  const ::std::string& remote_node_name() const;
  void set_remote_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_node_name(::std::string&& value);
  #endif
  void set_remote_node_name(const char* value);
  void set_remote_node_name(const char* value, size_t size);
  ::std::string* mutable_remote_node_name();
  ::std::string* release_remote_node_name();
  void set_allocated_remote_node_name(::std::string* remote_node_name);

  // optional string remote_service_name = 2;
  bool has_remote_service_name() const;
  void clear_remote_service_name();
  static const int kRemoteServiceNameFieldNumber = 2;
  const ::std::string& remote_service_name() const;
  void set_remote_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_service_name(::std::string&& value);
  #endif
  void set_remote_service_name(const char* value);
  void set_remote_service_name(const char* value, size_t size);
  ::std::string* mutable_remote_service_name();
  ::std::string* release_remote_service_name();
  void set_allocated_remote_service_name(::std::string* remote_service_name);

  // optional bytes netmsg = 3;
  bool has_netmsg() const;
  void clear_netmsg();
  static const int kNetmsgFieldNumber = 3;
  const ::std::string& netmsg() const;
  void set_netmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_netmsg(::std::string&& value);
  #endif
  void set_netmsg(const char* value);
  void set_netmsg(const void* value, size_t size);
  ::std::string* mutable_netmsg();
  ::std::string* release_netmsg();
  void set_allocated_netmsg(::std::string* netmsg);

  // @@protoc_insertion_point(class_scope:pb.iTestForwardMsg)
 private:
  void set_has_remote_node_name();
  void clear_has_remote_node_name();
  void set_has_remote_service_name();
  void clear_has_remote_service_name();
  void set_has_netmsg();
  void clear_has_netmsg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr remote_node_name_;
  ::google::protobuf::internal::ArenaStringPtr remote_service_name_;
  ::google::protobuf::internal::ArenaStringPtr netmsg_;
  friend struct protobuf_inner_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMsg

// optional int32 id = 1;
inline bool TestMsg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestMsg::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestMsg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TestMsg::id() const {
  // @@protoc_insertion_point(field_get:pb.TestMsg.id)
  return id_;
}
inline void TestMsg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TestMsg.id)
}

// optional string name = 2;
inline bool TestMsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TestMsg::name() const {
  // @@protoc_insertion_point(field_get:pb.TestMsg.name)
  return name_.GetNoArena();
}
inline void TestMsg::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TestMsg.name)
}
#if LANG_CXX11
inline void TestMsg::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TestMsg.name)
}
#endif
inline void TestMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TestMsg.name)
}
inline void TestMsg::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TestMsg.name)
}
inline ::std::string* TestMsg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pb.TestMsg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestMsg::release_name() {
  // @@protoc_insertion_point(field_release:pb.TestMsg.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.TestMsg.name)
}

// -------------------------------------------------------------------

// iTestPingShopREQ

// optional string ping_msg = 1;
inline bool iTestPingShopREQ::has_ping_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iTestPingShopREQ::set_has_ping_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iTestPingShopREQ::clear_has_ping_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iTestPingShopREQ::clear_ping_msg() {
  ping_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ping_msg();
}
inline const ::std::string& iTestPingShopREQ::ping_msg() const {
  // @@protoc_insertion_point(field_get:pb.iTestPingShopREQ.ping_msg)
  return ping_msg_.GetNoArena();
}
inline void iTestPingShopREQ::set_ping_msg(const ::std::string& value) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.iTestPingShopREQ.ping_msg)
}
#if LANG_CXX11
inline void iTestPingShopREQ::set_ping_msg(::std::string&& value) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.iTestPingShopREQ.ping_msg)
}
#endif
inline void iTestPingShopREQ::set_ping_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.iTestPingShopREQ.ping_msg)
}
inline void iTestPingShopREQ::set_ping_msg(const char* value, size_t size) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.iTestPingShopREQ.ping_msg)
}
inline ::std::string* iTestPingShopREQ::mutable_ping_msg() {
  set_has_ping_msg();
  // @@protoc_insertion_point(field_mutable:pb.iTestPingShopREQ.ping_msg)
  return ping_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iTestPingShopREQ::release_ping_msg() {
  // @@protoc_insertion_point(field_release:pb.iTestPingShopREQ.ping_msg)
  clear_has_ping_msg();
  return ping_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iTestPingShopREQ::set_allocated_ping_msg(::std::string* ping_msg) {
  if (ping_msg != NULL) {
    set_has_ping_msg();
  } else {
    clear_has_ping_msg();
  }
  ping_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.iTestPingShopREQ.ping_msg)
}

// -------------------------------------------------------------------

// iTestPingActivityMsg

// optional string ping_msg = 1;
inline bool iTestPingActivityMsg::has_ping_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iTestPingActivityMsg::set_has_ping_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iTestPingActivityMsg::clear_has_ping_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iTestPingActivityMsg::clear_ping_msg() {
  ping_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ping_msg();
}
inline const ::std::string& iTestPingActivityMsg::ping_msg() const {
  // @@protoc_insertion_point(field_get:pb.iTestPingActivityMsg.ping_msg)
  return ping_msg_.GetNoArena();
}
inline void iTestPingActivityMsg::set_ping_msg(const ::std::string& value) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.iTestPingActivityMsg.ping_msg)
}
#if LANG_CXX11
inline void iTestPingActivityMsg::set_ping_msg(::std::string&& value) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.iTestPingActivityMsg.ping_msg)
}
#endif
inline void iTestPingActivityMsg::set_ping_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.iTestPingActivityMsg.ping_msg)
}
inline void iTestPingActivityMsg::set_ping_msg(const char* value, size_t size) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.iTestPingActivityMsg.ping_msg)
}
inline ::std::string* iTestPingActivityMsg::mutable_ping_msg() {
  set_has_ping_msg();
  // @@protoc_insertion_point(field_mutable:pb.iTestPingActivityMsg.ping_msg)
  return ping_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iTestPingActivityMsg::release_ping_msg() {
  // @@protoc_insertion_point(field_release:pb.iTestPingActivityMsg.ping_msg)
  clear_has_ping_msg();
  return ping_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iTestPingActivityMsg::set_allocated_ping_msg(::std::string* ping_msg) {
  if (ping_msg != NULL) {
    set_has_ping_msg();
  } else {
    clear_has_ping_msg();
  }
  ping_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.iTestPingActivityMsg.ping_msg)
}

// -------------------------------------------------------------------

// iTestPingActivityREQ

// optional string ping_msg = 1;
inline bool iTestPingActivityREQ::has_ping_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iTestPingActivityREQ::set_has_ping_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iTestPingActivityREQ::clear_has_ping_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iTestPingActivityREQ::clear_ping_msg() {
  ping_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ping_msg();
}
inline const ::std::string& iTestPingActivityREQ::ping_msg() const {
  // @@protoc_insertion_point(field_get:pb.iTestPingActivityREQ.ping_msg)
  return ping_msg_.GetNoArena();
}
inline void iTestPingActivityREQ::set_ping_msg(const ::std::string& value) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.iTestPingActivityREQ.ping_msg)
}
#if LANG_CXX11
inline void iTestPingActivityREQ::set_ping_msg(::std::string&& value) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.iTestPingActivityREQ.ping_msg)
}
#endif
inline void iTestPingActivityREQ::set_ping_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.iTestPingActivityREQ.ping_msg)
}
inline void iTestPingActivityREQ::set_ping_msg(const char* value, size_t size) {
  set_has_ping_msg();
  ping_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.iTestPingActivityREQ.ping_msg)
}
inline ::std::string* iTestPingActivityREQ::mutable_ping_msg() {
  set_has_ping_msg();
  // @@protoc_insertion_point(field_mutable:pb.iTestPingActivityREQ.ping_msg)
  return ping_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iTestPingActivityREQ::release_ping_msg() {
  // @@protoc_insertion_point(field_release:pb.iTestPingActivityREQ.ping_msg)
  clear_has_ping_msg();
  return ping_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iTestPingActivityREQ::set_allocated_ping_msg(::std::string* ping_msg) {
  if (ping_msg != NULL) {
    set_has_ping_msg();
  } else {
    clear_has_ping_msg();
  }
  ping_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.iTestPingActivityREQ.ping_msg)
}

// -------------------------------------------------------------------

// iTestPingActivityRSP

// optional string pong_msg = 1;
inline bool iTestPingActivityRSP::has_pong_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iTestPingActivityRSP::set_has_pong_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iTestPingActivityRSP::clear_has_pong_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iTestPingActivityRSP::clear_pong_msg() {
  pong_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pong_msg();
}
inline const ::std::string& iTestPingActivityRSP::pong_msg() const {
  // @@protoc_insertion_point(field_get:pb.iTestPingActivityRSP.pong_msg)
  return pong_msg_.GetNoArena();
}
inline void iTestPingActivityRSP::set_pong_msg(const ::std::string& value) {
  set_has_pong_msg();
  pong_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.iTestPingActivityRSP.pong_msg)
}
#if LANG_CXX11
inline void iTestPingActivityRSP::set_pong_msg(::std::string&& value) {
  set_has_pong_msg();
  pong_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.iTestPingActivityRSP.pong_msg)
}
#endif
inline void iTestPingActivityRSP::set_pong_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pong_msg();
  pong_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.iTestPingActivityRSP.pong_msg)
}
inline void iTestPingActivityRSP::set_pong_msg(const char* value, size_t size) {
  set_has_pong_msg();
  pong_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.iTestPingActivityRSP.pong_msg)
}
inline ::std::string* iTestPingActivityRSP::mutable_pong_msg() {
  set_has_pong_msg();
  // @@protoc_insertion_point(field_mutable:pb.iTestPingActivityRSP.pong_msg)
  return pong_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iTestPingActivityRSP::release_pong_msg() {
  // @@protoc_insertion_point(field_release:pb.iTestPingActivityRSP.pong_msg)
  clear_has_pong_msg();
  return pong_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iTestPingActivityRSP::set_allocated_pong_msg(::std::string* pong_msg) {
  if (pong_msg != NULL) {
    set_has_pong_msg();
  } else {
    clear_has_pong_msg();
  }
  pong_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.iTestPingActivityRSP.pong_msg)
}

// -------------------------------------------------------------------

// iTestForwardMsg

// optional string remote_node_name = 1;
inline bool iTestForwardMsg::has_remote_node_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iTestForwardMsg::set_has_remote_node_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iTestForwardMsg::clear_has_remote_node_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iTestForwardMsg::clear_remote_node_name() {
  remote_node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remote_node_name();
}
inline const ::std::string& iTestForwardMsg::remote_node_name() const {
  // @@protoc_insertion_point(field_get:pb.iTestForwardMsg.remote_node_name)
  return remote_node_name_.GetNoArena();
}
inline void iTestForwardMsg::set_remote_node_name(const ::std::string& value) {
  set_has_remote_node_name();
  remote_node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.iTestForwardMsg.remote_node_name)
}
#if LANG_CXX11
inline void iTestForwardMsg::set_remote_node_name(::std::string&& value) {
  set_has_remote_node_name();
  remote_node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.iTestForwardMsg.remote_node_name)
}
#endif
inline void iTestForwardMsg::set_remote_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remote_node_name();
  remote_node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.iTestForwardMsg.remote_node_name)
}
inline void iTestForwardMsg::set_remote_node_name(const char* value, size_t size) {
  set_has_remote_node_name();
  remote_node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.iTestForwardMsg.remote_node_name)
}
inline ::std::string* iTestForwardMsg::mutable_remote_node_name() {
  set_has_remote_node_name();
  // @@protoc_insertion_point(field_mutable:pb.iTestForwardMsg.remote_node_name)
  return remote_node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iTestForwardMsg::release_remote_node_name() {
  // @@protoc_insertion_point(field_release:pb.iTestForwardMsg.remote_node_name)
  clear_has_remote_node_name();
  return remote_node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iTestForwardMsg::set_allocated_remote_node_name(::std::string* remote_node_name) {
  if (remote_node_name != NULL) {
    set_has_remote_node_name();
  } else {
    clear_has_remote_node_name();
  }
  remote_node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_node_name);
  // @@protoc_insertion_point(field_set_allocated:pb.iTestForwardMsg.remote_node_name)
}

// optional string remote_service_name = 2;
inline bool iTestForwardMsg::has_remote_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void iTestForwardMsg::set_has_remote_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void iTestForwardMsg::clear_has_remote_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void iTestForwardMsg::clear_remote_service_name() {
  remote_service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remote_service_name();
}
inline const ::std::string& iTestForwardMsg::remote_service_name() const {
  // @@protoc_insertion_point(field_get:pb.iTestForwardMsg.remote_service_name)
  return remote_service_name_.GetNoArena();
}
inline void iTestForwardMsg::set_remote_service_name(const ::std::string& value) {
  set_has_remote_service_name();
  remote_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.iTestForwardMsg.remote_service_name)
}
#if LANG_CXX11
inline void iTestForwardMsg::set_remote_service_name(::std::string&& value) {
  set_has_remote_service_name();
  remote_service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.iTestForwardMsg.remote_service_name)
}
#endif
inline void iTestForwardMsg::set_remote_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remote_service_name();
  remote_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.iTestForwardMsg.remote_service_name)
}
inline void iTestForwardMsg::set_remote_service_name(const char* value, size_t size) {
  set_has_remote_service_name();
  remote_service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.iTestForwardMsg.remote_service_name)
}
inline ::std::string* iTestForwardMsg::mutable_remote_service_name() {
  set_has_remote_service_name();
  // @@protoc_insertion_point(field_mutable:pb.iTestForwardMsg.remote_service_name)
  return remote_service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iTestForwardMsg::release_remote_service_name() {
  // @@protoc_insertion_point(field_release:pb.iTestForwardMsg.remote_service_name)
  clear_has_remote_service_name();
  return remote_service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iTestForwardMsg::set_allocated_remote_service_name(::std::string* remote_service_name) {
  if (remote_service_name != NULL) {
    set_has_remote_service_name();
  } else {
    clear_has_remote_service_name();
  }
  remote_service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_service_name);
  // @@protoc_insertion_point(field_set_allocated:pb.iTestForwardMsg.remote_service_name)
}

// optional bytes netmsg = 3;
inline bool iTestForwardMsg::has_netmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void iTestForwardMsg::set_has_netmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void iTestForwardMsg::clear_has_netmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void iTestForwardMsg::clear_netmsg() {
  netmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_netmsg();
}
inline const ::std::string& iTestForwardMsg::netmsg() const {
  // @@protoc_insertion_point(field_get:pb.iTestForwardMsg.netmsg)
  return netmsg_.GetNoArena();
}
inline void iTestForwardMsg::set_netmsg(const ::std::string& value) {
  set_has_netmsg();
  netmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.iTestForwardMsg.netmsg)
}
#if LANG_CXX11
inline void iTestForwardMsg::set_netmsg(::std::string&& value) {
  set_has_netmsg();
  netmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.iTestForwardMsg.netmsg)
}
#endif
inline void iTestForwardMsg::set_netmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_netmsg();
  netmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.iTestForwardMsg.netmsg)
}
inline void iTestForwardMsg::set_netmsg(const void* value, size_t size) {
  set_has_netmsg();
  netmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.iTestForwardMsg.netmsg)
}
inline ::std::string* iTestForwardMsg::mutable_netmsg() {
  set_has_netmsg();
  // @@protoc_insertion_point(field_mutable:pb.iTestForwardMsg.netmsg)
  return netmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iTestForwardMsg::release_netmsg() {
  // @@protoc_insertion_point(field_release:pb.iTestForwardMsg.netmsg)
  clear_has_netmsg();
  return netmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iTestForwardMsg::set_allocated_netmsg(::std::string* netmsg) {
  if (netmsg != NULL) {
    set_has_netmsg();
  } else {
    clear_has_netmsg();
  }
  netmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netmsg);
  // @@protoc_insertion_point(field_set_allocated:pb.iTestForwardMsg.netmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inner_2eproto__INCLUDED
