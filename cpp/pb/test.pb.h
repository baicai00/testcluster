// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace pb {
class PingREQ;
class PingREQDefaultTypeInternal;
extern PingREQDefaultTypeInternal _PingREQ_default_instance_;
class PingRSP;
class PingRSPDefaultTypeInternal;
extern PingRSPDefaultTypeInternal _PingRSP_default_instance_;
}  // namespace pb

namespace pb {

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_test_2eproto

// ===================================================================

class PingREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PingREQ) */ {
 public:
  PingREQ();
  virtual ~PingREQ();

  PingREQ(const PingREQ& from);

  inline PingREQ& operator=(const PingREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingREQ(PingREQ&& from) noexcept
    : PingREQ() {
    *this = ::std::move(from);
  }

  inline PingREQ& operator=(PingREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingREQ& default_instance();

  static inline const PingREQ* internal_default_instance() {
    return reinterpret_cast<const PingREQ*>(
               &_PingREQ_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PingREQ* other);
  friend void swap(PingREQ& a, PingREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingREQ* New() const PROTOBUF_FINAL { return New(NULL); }

  PingREQ* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingREQ& from);
  void MergeFrom(const PingREQ& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string req_ctx = 1;
  bool has_req_ctx() const;
  void clear_req_ctx();
  static const int kReqCtxFieldNumber = 1;
  const ::std::string& req_ctx() const;
  void set_req_ctx(const ::std::string& value);
  #if LANG_CXX11
  void set_req_ctx(::std::string&& value);
  #endif
  void set_req_ctx(const char* value);
  void set_req_ctx(const char* value, size_t size);
  ::std::string* mutable_req_ctx();
  ::std::string* release_req_ctx();
  void set_allocated_req_ctx(::std::string* req_ctx);

  // @@protoc_insertion_point(class_scope:pb.PingREQ)
 private:
  void set_has_req_ctx();
  void clear_has_req_ctx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr req_ctx_;
  friend struct protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PingRSP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PingRSP) */ {
 public:
  PingRSP();
  virtual ~PingRSP();

  PingRSP(const PingRSP& from);

  inline PingRSP& operator=(const PingRSP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRSP(PingRSP&& from) noexcept
    : PingRSP() {
    *this = ::std::move(from);
  }

  inline PingRSP& operator=(PingRSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRSP& default_instance();

  static inline const PingRSP* internal_default_instance() {
    return reinterpret_cast<const PingRSP*>(
               &_PingRSP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PingRSP* other);
  friend void swap(PingRSP& a, PingRSP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRSP* New() const PROTOBUF_FINAL { return New(NULL); }

  PingRSP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingRSP& from);
  void MergeFrom(const PingRSP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingRSP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rsp_ctx = 2;
  bool has_rsp_ctx() const;
  void clear_rsp_ctx();
  static const int kRspCtxFieldNumber = 2;
  const ::std::string& rsp_ctx() const;
  void set_rsp_ctx(const ::std::string& value);
  #if LANG_CXX11
  void set_rsp_ctx(::std::string&& value);
  #endif
  void set_rsp_ctx(const char* value);
  void set_rsp_ctx(const char* value, size_t size);
  ::std::string* mutable_rsp_ctx();
  ::std::string* release_rsp_ctx();
  void set_allocated_rsp_ctx(::std::string* rsp_ctx);

  // @@protoc_insertion_point(class_scope:pb.PingRSP)
 private:
  void set_has_rsp_ctx();
  void clear_has_rsp_ctx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rsp_ctx_;
  friend struct protobuf_test_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingREQ

// optional string req_ctx = 1;
inline bool PingREQ::has_req_ctx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PingREQ::set_has_req_ctx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PingREQ::clear_has_req_ctx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PingREQ::clear_req_ctx() {
  req_ctx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_req_ctx();
}
inline const ::std::string& PingREQ::req_ctx() const {
  // @@protoc_insertion_point(field_get:pb.PingREQ.req_ctx)
  return req_ctx_.GetNoArena();
}
inline void PingREQ::set_req_ctx(const ::std::string& value) {
  set_has_req_ctx();
  req_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PingREQ.req_ctx)
}
#if LANG_CXX11
inline void PingREQ::set_req_ctx(::std::string&& value) {
  set_has_req_ctx();
  req_ctx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PingREQ.req_ctx)
}
#endif
inline void PingREQ::set_req_ctx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_req_ctx();
  req_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PingREQ.req_ctx)
}
inline void PingREQ::set_req_ctx(const char* value, size_t size) {
  set_has_req_ctx();
  req_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PingREQ.req_ctx)
}
inline ::std::string* PingREQ::mutable_req_ctx() {
  set_has_req_ctx();
  // @@protoc_insertion_point(field_mutable:pb.PingREQ.req_ctx)
  return req_ctx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingREQ::release_req_ctx() {
  // @@protoc_insertion_point(field_release:pb.PingREQ.req_ctx)
  clear_has_req_ctx();
  return req_ctx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingREQ::set_allocated_req_ctx(::std::string* req_ctx) {
  if (req_ctx != NULL) {
    set_has_req_ctx();
  } else {
    clear_has_req_ctx();
  }
  req_ctx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_ctx);
  // @@protoc_insertion_point(field_set_allocated:pb.PingREQ.req_ctx)
}

// -------------------------------------------------------------------

// PingRSP

// optional string rsp_ctx = 2;
inline bool PingRSP::has_rsp_ctx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PingRSP::set_has_rsp_ctx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PingRSP::clear_has_rsp_ctx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PingRSP::clear_rsp_ctx() {
  rsp_ctx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsp_ctx();
}
inline const ::std::string& PingRSP::rsp_ctx() const {
  // @@protoc_insertion_point(field_get:pb.PingRSP.rsp_ctx)
  return rsp_ctx_.GetNoArena();
}
inline void PingRSP::set_rsp_ctx(const ::std::string& value) {
  set_has_rsp_ctx();
  rsp_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PingRSP.rsp_ctx)
}
#if LANG_CXX11
inline void PingRSP::set_rsp_ctx(::std::string&& value) {
  set_has_rsp_ctx();
  rsp_ctx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PingRSP.rsp_ctx)
}
#endif
inline void PingRSP::set_rsp_ctx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsp_ctx();
  rsp_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PingRSP.rsp_ctx)
}
inline void PingRSP::set_rsp_ctx(const char* value, size_t size) {
  set_has_rsp_ctx();
  rsp_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PingRSP.rsp_ctx)
}
inline ::std::string* PingRSP::mutable_rsp_ctx() {
  set_has_rsp_ctx();
  // @@protoc_insertion_point(field_mutable:pb.PingRSP.rsp_ctx)
  return rsp_ctx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingRSP::release_rsp_ctx() {
  // @@protoc_insertion_point(field_release:pb.PingRSP.rsp_ctx)
  clear_has_rsp_ctx();
  return rsp_ctx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRSP::set_allocated_rsp_ctx(::std::string* rsp_ctx) {
  if (rsp_ctx != NULL) {
    set_has_rsp_ctx();
  } else {
    clear_has_rsp_ctx();
  }
  rsp_ctx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsp_ctx);
  // @@protoc_insertion_point(field_set_allocated:pb.PingRSP.rsp_ctx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
