// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
class PingREQDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PingREQ>
     _instance;
} _PingREQ_default_instance_;
class PingRSPDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PingRSP>
     _instance;
} _PingRSP_default_instance_;

namespace protobuf_test_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingREQ, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingREQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingREQ, req_ctx_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRSP, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRSP, rsp_ctx_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(PingREQ)},
  { 7, 13, sizeof(PingRSP)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingREQ_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingRSP_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PingREQ_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PingREQ_default_instance_);_PingRSP_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PingRSP_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ntest.proto\022\002pb\"\032\n\007PingREQ\022\017\n\007req_ctx\030\001"
      " \001(\t\"\032\n\007PingRSP\022\017\n\007rsp_ctx\030\002 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 72);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_test_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingREQ::kReqCtxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingREQ::PingREQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PingREQ)
}
PingREQ::PingREQ(const PingREQ& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  req_ctx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_req_ctx()) {
    req_ctx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_ctx_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.PingREQ)
}

void PingREQ::SharedCtor() {
  _cached_size_ = 0;
  req_ctx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PingREQ::~PingREQ() {
  // @@protoc_insertion_point(destructor:pb.PingREQ)
  SharedDtor();
}

void PingREQ::SharedDtor() {
  req_ctx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PingREQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingREQ::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingREQ& PingREQ::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingREQ* PingREQ::New(::google::protobuf::Arena* arena) const {
  PingREQ* n = new PingREQ;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingREQ::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PingREQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_req_ctx()) {
    GOOGLE_DCHECK(!req_ctx_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*req_ctx_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PingREQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PingREQ)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string req_ctx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_ctx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->req_ctx().data(), static_cast<int>(this->req_ctx().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.PingREQ.req_ctx");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PingREQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PingREQ)
  return false;
#undef DO_
}

void PingREQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PingREQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string req_ctx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_ctx().data(), static_cast<int>(this->req_ctx().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.PingREQ.req_ctx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->req_ctx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PingREQ)
}

::google::protobuf::uint8* PingREQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.PingREQ)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string req_ctx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_ctx().data(), static_cast<int>(this->req_ctx().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.PingREQ.req_ctx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->req_ctx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PingREQ)
  return target;
}

size_t PingREQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PingREQ)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string req_ctx = 1;
  if (has_req_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->req_ctx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingREQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PingREQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PingREQ* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingREQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PingREQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PingREQ)
    MergeFrom(*source);
  }
}

void PingREQ::MergeFrom(const PingREQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PingREQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_req_ctx()) {
    set_has_req_ctx();
    req_ctx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_ctx_);
  }
}

void PingREQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PingREQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingREQ::CopyFrom(const PingREQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PingREQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingREQ::IsInitialized() const {
  return true;
}

void PingREQ::Swap(PingREQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingREQ::InternalSwap(PingREQ* other) {
  using std::swap;
  req_ctx_.Swap(&other->req_ctx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingREQ::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingREQ

// optional string req_ctx = 1;
bool PingREQ::has_req_ctx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PingREQ::set_has_req_ctx() {
  _has_bits_[0] |= 0x00000001u;
}
void PingREQ::clear_has_req_ctx() {
  _has_bits_[0] &= ~0x00000001u;
}
void PingREQ::clear_req_ctx() {
  req_ctx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_req_ctx();
}
const ::std::string& PingREQ::req_ctx() const {
  // @@protoc_insertion_point(field_get:pb.PingREQ.req_ctx)
  return req_ctx_.GetNoArena();
}
void PingREQ::set_req_ctx(const ::std::string& value) {
  set_has_req_ctx();
  req_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PingREQ.req_ctx)
}
#if LANG_CXX11
void PingREQ::set_req_ctx(::std::string&& value) {
  set_has_req_ctx();
  req_ctx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PingREQ.req_ctx)
}
#endif
void PingREQ::set_req_ctx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_req_ctx();
  req_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PingREQ.req_ctx)
}
void PingREQ::set_req_ctx(const char* value, size_t size) {
  set_has_req_ctx();
  req_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PingREQ.req_ctx)
}
::std::string* PingREQ::mutable_req_ctx() {
  set_has_req_ctx();
  // @@protoc_insertion_point(field_mutable:pb.PingREQ.req_ctx)
  return req_ctx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PingREQ::release_req_ctx() {
  // @@protoc_insertion_point(field_release:pb.PingREQ.req_ctx)
  clear_has_req_ctx();
  return req_ctx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PingREQ::set_allocated_req_ctx(::std::string* req_ctx) {
  if (req_ctx != NULL) {
    set_has_req_ctx();
  } else {
    clear_has_req_ctx();
  }
  req_ctx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_ctx);
  // @@protoc_insertion_point(field_set_allocated:pb.PingREQ.req_ctx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingRSP::kRspCtxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRSP::PingRSP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PingRSP)
}
PingRSP::PingRSP(const PingRSP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsp_ctx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsp_ctx()) {
    rsp_ctx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsp_ctx_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.PingRSP)
}

void PingRSP::SharedCtor() {
  _cached_size_ = 0;
  rsp_ctx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PingRSP::~PingRSP() {
  // @@protoc_insertion_point(destructor:pb.PingRSP)
  SharedDtor();
}

void PingRSP::SharedDtor() {
  rsp_ctx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PingRSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRSP::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingRSP& PingRSP::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingRSP* PingRSP::New(::google::protobuf::Arena* arena) const {
  PingRSP* n = new PingRSP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingRSP::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PingRSP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_rsp_ctx()) {
    GOOGLE_DCHECK(!rsp_ctx_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*rsp_ctx_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PingRSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PingRSP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rsp_ctx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsp_ctx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rsp_ctx().data(), static_cast<int>(this->rsp_ctx().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.PingRSP.rsp_ctx");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PingRSP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PingRSP)
  return false;
#undef DO_
}

void PingRSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PingRSP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rsp_ctx = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rsp_ctx().data(), static_cast<int>(this->rsp_ctx().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.PingRSP.rsp_ctx");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rsp_ctx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PingRSP)
}

::google::protobuf::uint8* PingRSP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.PingRSP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rsp_ctx = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rsp_ctx().data(), static_cast<int>(this->rsp_ctx().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.PingRSP.rsp_ctx");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rsp_ctx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PingRSP)
  return target;
}

size_t PingRSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PingRSP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string rsp_ctx = 2;
  if (has_rsp_ctx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rsp_ctx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRSP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PingRSP)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRSP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingRSP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PingRSP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PingRSP)
    MergeFrom(*source);
  }
}

void PingRSP::MergeFrom(const PingRSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PingRSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rsp_ctx()) {
    set_has_rsp_ctx();
    rsp_ctx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsp_ctx_);
  }
}

void PingRSP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PingRSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRSP::CopyFrom(const PingRSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PingRSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRSP::IsInitialized() const {
  return true;
}

void PingRSP::Swap(PingRSP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRSP::InternalSwap(PingRSP* other) {
  using std::swap;
  rsp_ctx_.Swap(&other->rsp_ctx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingRSP::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRSP

// optional string rsp_ctx = 2;
bool PingRSP::has_rsp_ctx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PingRSP::set_has_rsp_ctx() {
  _has_bits_[0] |= 0x00000001u;
}
void PingRSP::clear_has_rsp_ctx() {
  _has_bits_[0] &= ~0x00000001u;
}
void PingRSP::clear_rsp_ctx() {
  rsp_ctx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsp_ctx();
}
const ::std::string& PingRSP::rsp_ctx() const {
  // @@protoc_insertion_point(field_get:pb.PingRSP.rsp_ctx)
  return rsp_ctx_.GetNoArena();
}
void PingRSP::set_rsp_ctx(const ::std::string& value) {
  set_has_rsp_ctx();
  rsp_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PingRSP.rsp_ctx)
}
#if LANG_CXX11
void PingRSP::set_rsp_ctx(::std::string&& value) {
  set_has_rsp_ctx();
  rsp_ctx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PingRSP.rsp_ctx)
}
#endif
void PingRSP::set_rsp_ctx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsp_ctx();
  rsp_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PingRSP.rsp_ctx)
}
void PingRSP::set_rsp_ctx(const char* value, size_t size) {
  set_has_rsp_ctx();
  rsp_ctx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PingRSP.rsp_ctx)
}
::std::string* PingRSP::mutable_rsp_ctx() {
  set_has_rsp_ctx();
  // @@protoc_insertion_point(field_mutable:pb.PingRSP.rsp_ctx)
  return rsp_ctx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PingRSP::release_rsp_ctx() {
  // @@protoc_insertion_point(field_release:pb.PingRSP.rsp_ctx)
  clear_has_rsp_ctx();
  return rsp_ctx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PingRSP::set_allocated_rsp_ctx(::std::string* rsp_ctx) {
  if (rsp_ctx != NULL) {
    set_has_rsp_ctx();
  } else {
    clear_has_rsp_ctx();
  }
  rsp_ctx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsp_ctx);
  // @@protoc_insertion_point(field_set_allocated:pb.PingRSP.rsp_ctx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
